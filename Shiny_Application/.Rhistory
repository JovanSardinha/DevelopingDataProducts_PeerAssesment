adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
grep("IL*", colnames(training))
str(training)
colnames(training)
grep("^IL*", colnames(training))
grep("^[IL]*", colnames(training))
grep("^IL", colnames(training))
training2 <- training[,grep("^IL", colnames(training))]
colnames(training2)
preProc <- preProcess(traning, method = "pca", pcaComp = 2)
preProc <- preProcess(traning2, method = "pca", pcaComp = 2)
preProc <- preProcess(traning2[], method = "pca", pcaComp = 2)
training2 <- training[,grep("^IL", colnames(training))]
preProc <- preProcess(traning2, method = "pca", pcaComp = 2)
training2 <- training[,grep("^IL", colnames(training))]
preProc <- preProcess(training2, method = "pca", pcaComp = 2)
trainPC <- predict(preProc, training2)
training2 <- training[,c(1,grep("^IL", colnames(training)))]
preProc <- preProcess(training2, method = "pca", pcaComp = 2)
trainPC <- predict(preProc, training2)
training2 <- training[,c(grep("^IL", colnames(training)))]
preProc <- preProcess(training2, method = "pca", pcaComp = 2)
trainPC <- predict(preProc, training2)
training2 <- training[,c(1,grep("^IL", colnames(training)))]
preProc <- preProcess(training2[,-1], method = "pca", pcaComp = 2)
trainPC <- predict(preProc, training2)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis~., method = "glm", data = training2)
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
library(caret)
library(AppliedPredictiveModeling)
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
testPC <- predict(preProc, testing2[,-1])
testing2 <- testing[,c(1,grep("^IL", colnames(training)))]
testPC <- predict(preProc, testing[,-1])
testPC <- predict(preProc, testing[,-1])
testPC <- predict(preProc, testing2[,-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
install.packages('e1071', dependencies=TRUE)
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
testPC <- predict(preProc, testing2[,-1])
library(e1071)
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$type, predict(modelFit, testPC))
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
str(testing2[,-1])
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", pcaComp = 2)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
print(modelFit)
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", pcaComp = 5)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
Print(modelFit)
print(modelFit)
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", pcaComp = 7)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
print(modelFit)
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", pcaComp = 9)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
print(modelFit)
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", pcaComp = 10)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
print(modelFit)
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.85)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
print(modelFit)
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess.default(training2[,-1], method = "pca", thresh = 0.85)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
print(modelFit)
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", pcaComp = 5)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
testPC
modelFit
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
modelFit
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
modelFit$numComp
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", pcaComp = 5)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
modelFit$numComp
modelFit$comp
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.90)
preProc$rotation
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.95)
training2 <- training
testing2 <- testing
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.95)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.95)
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.95)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
testPC <- predict(preProc, testing2[,-1])
predict(modelFit, testPC)
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.90)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
testPC <- predict(preProc, testing2[,-1])
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.90)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(diagnosis ~., method = "glm", data = training2)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(diagnosis, predict(modelFit, testPC))
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC), data = training2)
confusionMatrix.default(testing2$diagnosis, predict(modelFit, testPC))
confusionMatrix.default(testing2$diagnosis, predict(modelFit, testPC))
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
debug
debug(confusionMatrix(testing2$diagnosis, predict(modelFit, testPC)))
showerror
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
library(caret); library(kernlab); data(spam)
install.packages("kernlab")
library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
preProc <- preProcess(log10(training[,-58]+1),method="pca",pcaComp=2)
trainPC <- predict(preProc,log10(training[,-58]+1))
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,log10(testing[,-58]+1))
confusionMatrix(testing$type,predict(modelFit,testPC))
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.90)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
library(caret)
library(AppliedPredictiveModeling)
library(e1071)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.90)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.90)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
library(caret)
library(AppliedPredictiveModeling)
library(e1071)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.90)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
library(caret)
library(AppliedPredictiveModeling)
library(e1071)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.80)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1])
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
install.packages('e1071', dependencies=TRUE)
library(caret)
library(AppliedPredictiveModeling)
library(e1071)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.90)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
library(caret)
library(AppliedPredictiveModeling)
library(e1071)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.90)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
library(caret)
library(AppliedPredictiveModeling)
library(e1071)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.80)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.80)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
library(caret)
library(AppliedPredictiveModeling)
library(e1071)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.80)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
availablePackages <- available.packages()[,1]
install.packages(availablePackages)
installedPackages <- .packages(all.available = TRUE)
install.packages('e1071', dependencies=TRUE)
library(caret)
library(AppliedPredictiveModeling)
library(e1071)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.90)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
library(caret)
library(AppliedPredictiveModeling)
library(e1071)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.90)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = trainPC)
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
confusionMatrix(testing2$diagnosis, predict(modelFit, testing2))
sessionInfo()
library(twitteR)
library(plyr)
library(stringr)
source("scoreSentiment.R")
setwd("C:/Users/jsardinha/Documents/GitHub/DevelopingDataProducts_PeerAssesment/Shiny_Application")
source("scoreSentiment.R")
cred <- OAuthFactory$new(consumerKey='U2UjoLaNiR4oeTbWG4Cj1W58a',
consumerSecret='kk71s1rCeH7JYXDXbd3mndLM98XIaHk2NSD12QTuchKFghFqPh',
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='http://api.twitter.com/oauth/access_token',
authURL='http://api.twitter.com/oauth/authorize')
cred$handshake(cainfo="cacert.pem")
source("scoreSentiment.R")
download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
red <- OAuthFactory$new(consumerKey='U2UjoLaNiR4oeTbWG4Cj1W58a',
consumerSecret='kk71s1rCeH7JYXDXbd3mndLM98XIaHk2NSD12QTuchKFghFqPh',
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='http://api.twitter.com/oauth/access_token',
authURL='http://api.twitter.com/oauth/authorize')
#necessary step for Windows
cred$handshake(cainfo="cacert.pem")
cred$handshake(cainfo="cacert.pem")
source("scoreSentiment.R")
download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
cred <- OAuthFactory$new(consumerKey='U2UjoLaNiR4oeTbWG4Cj1W58a',
consumerSecret='kk71s1rCeH7JYXDXbd3mndLM98XIaHk2NSD12QTuchKFghFqPh',
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='http://api.twitter.com/oauth/access_token',
authURL='http://api.twitter.com/oauth/authorize')
#necessary step for Windows
cred$handshake(cainfo="cacert.pem")
cred <- OAuthFactory$new(consumerKey='h5Z6okyP5kUQEmLWhwx7wzkoz',
consumerSecret='3HTKDnfH46t55wSZrqV0k2SvtOougkfY37ApZ1cHm58aOE4OcU',
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='http://api.twitter.com/oauth/access_token',
authURL='http://api.twitter.com/oauth/authorize')
#necessary step for Windows
cred$handshake(cainfo="cacert.pem")
cred$handshake(cainfo="cacert.pem")
cred$handshake(cainfo="cacert.pem")
cred$handshake(cainfo="cacert.pem")
cred$handshake(cainfo="cacert.pem")
cred$handshake(cainfo="cacert.pem")
cred$handshake(cainfo="cacert.pem")
source("scoreSentiment.R")
download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
cred <- OAuthFactory$new(consumerKey='h5Z6okyP5kUQEmLWhwx7wzkoz',
consumerSecret='3HTKDnfH46t55wSZrqV0k2SvtOougkfY37ApZ1cHm58aOE4OcU',
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='http://api.twitter.com/oauth/access_token',
authURL='http://api.twitter.com/oauth/authorize')
#necessary step for Windows
cred$handshake(cainfo="cacert.pem")
source("scoreSentiment.R")
download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
cred <- OAuthFactory$new(consumerKey='h5Z6okyP5kUQEmLWhwx7wzkoz',
consumerSecret='3HTKDnfH46t55wSZrqV0k2SvtOougkfY37ApZ1cHm58aOE4OcU',
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='https://api.twitter.com/oauth/access_token',
authURL='https://api.twitter.com/oauth/authorize')
#necessary step for Windows
cred$handshake(cainfo="cacert.pem")
registerTwitterOAuth(cred)
save(cred, file="twitter authentication.Rdata")
pos = readLines("./data/positive_words.txt")
neg = readLines("./data/negative_words.txt")
wine_tweets = searchTwitter("wine", n=500, lang="en")
s=searchTwitter('GOOG',cainfo="cacert.pem")
s[[1]]
rm(s)
wine_tweets = searchTwitter("wine", n=500, lang="en", cainfo="cacert.pem")
wine_tweets
wine_tweets = searchTwitter("wine", n=50, lang="en", cainfo="cacert.pem")
wine_txt = sapply(wine_tweets, function(x) x$getText())
beer_txt = sapply(beer_tweets, function(x) x$getText())
cofe_txt = sapply(cofe_tweets, function(x) x$getText())
soda_txt = sapply(soda_tweets, function(x) x$getText())
wine_txt = sapply(wine_tweets, function(x) x$getText())
beer_txt = sapply(beer_tweets, function(x) x$getText())
cofe_txt = sapply(cofe_tweets, function(x) x$getText())
soda_txt = sapply(soda_tweets, function(x) x$getText())
wine_tweets = searchTwitter("wine", n=500, lang="en", cainfo="cacert.pem")
beer_tweets = searchTwitter("beer", n=500, lang="en", cainfo="cacert.pem")
cofe_tweets = searchTwitter("coffee", n=500, lang="en",cainfo="cacert.pem")
soda_tweets = searchTwitter("soda", n=500, lang="en",cainfo="cacert.pem")
# get text
wine_txt = sapply(wine_tweets, function(x) x$getText())
beer_txt = sapply(beer_tweets, function(x) x$getText())
cofe_txt = sapply(cofe_tweets, function(x) x$getText())
soda_txt = sapply(soda_tweets, function(x) x$getText())
wine_tweets = searchTwitter("wine", n=100, lang="en", cainfo="cacert.pem")
beer_tweets = searchTwitter("beer", n=100, lang="en", cainfo="cacert.pem")
cofe_tweets = searchTwitter("coffee", n=100, lang="en",cainfo="cacert.pem")
soda_tweets = searchTwitter("soda", n=100, lang="en",cainfo="cacert.pem")
# get text
wine_txt = sapply(wine_tweets, function(x) x$getText())
beer_txt = sapply(beer_tweets, function(x) x$getText())
cofe_txt = sapply(cofe_tweets, function(x) x$getText())
soda_txt = sapply(soda_tweets, function(x) x$getText())
drinks = c(wine_txt, beer_txt, cofe_txt, soda_txt)
nd = c(length(wine_txt), length(beer_txt), length(cofe_txt), length(soda_txt))
# join texts
drinks = c(wine_txt, beer_txt, cofe_txt, soda_txt)
drinks
scores = score.sentiment(ari_txt, pos, neg, .progress='text')
scores = score.sentiment(drinks, pos, neg, .progress='text')
scores$drink = factor(rep(c("wine", "beer", "coffee", "soda"), nd))
scores$very.pos = as.numeric(scores$score >= 2)
scores$very.neg = as.numeric(scores$score <= -2)
# how many very positives and very negatives
numpos = sum(scores$very.pos)
numneg = sum(scores$very.neg)
global_score = round( 100 * numpos / (numpos + numneg) )
# boxplot
ggplot(scores, aes(x=drink, y=score, group=drink)) +
geom_boxplot(aes(fill=drink)) +
scale_fill_manual(values=cols) +
geom_jitter(colour="gray40",
position=position_jitter(width=0.2), alpha=0.3) +
opts(title = "Boxplot - Drink's Sentiment Scores")
library(ggplot)
# boxplot
ggplot(scores, aes(x=drink, y=score, group=drink)) +
geom_boxplot(aes(fill=drink)) +
scale_fill_manual(values=cols) +
geom_jitter(colour="gray40",
position=position_jitter(width=0.2), alpha=0.3) +
opts(title = "Boxplot - Drink's Sentiment Scores")
g <- ggplot(scores, aes(x=drink, y=score, group=drink)) +
geom_boxplot(aes(fill=drink)) +
scale_fill_manual(values=cols) +
geom_jitter(colour="gray40",
position=position_jitter(width=0.2), alpha=0.3) +
opts(title = "Boxplot - Drink's Sentiment Scores")
library(ggplot2)
g <- ggplot(scores, aes(x=drink, y=score, group=drink)) +
geom_boxplot(aes(fill=drink)) +
scale_fill_manual(values=cols) +
geom_jitter(colour="gray40",
position=position_jitter(width=0.2), alpha=0.3) +
opts(title = "Boxplot - Drink's Sentiment Scores")
g <- ggplot(scores, aes(x=drink, y=score, group=drink)) +
geom_boxplot(aes(fill=drink)) +
scale_fill_manual(values=cols) +
opts(title = "Boxplot - Drink's Sentiment Scores")
View(scores)
plot(scores)
shiny::runApp()
runApp(0)
runApp()
runApp()
shiny::runApp()
